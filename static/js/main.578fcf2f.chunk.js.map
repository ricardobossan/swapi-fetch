{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["number","min","max","Math","ceil","floor","random","Main","styled","main","App","useState","planet","setPlanet","randomizePlanet","fetch","then","res","json","result","JSON","stringify","console","log","parse","useEffect","className","style","backgroundColor","name","toUpperCase","population","climate","terrain","films","length","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qvCAMA,IAAIA,EAAS,SAA+BC,EAAKC,GAG/C,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAQjDM,EAAOC,IAAOC,KAAV,KA+GKC,MAxDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAGPC,EAAkB,WACtBC,MAAM,gCAAD,OAAiCf,EAAO,EAAG,IAA3C,MACFgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAASG,GACb,OAAOC,KAAKC,UAAUF,KAEvBH,KAAK,SAASC,GAEb,OADAK,QAAQC,IAAIN,GACLG,KAAKI,MAAMP,KAEnBD,KAAK,SAAAC,GACJK,QAAQC,IAAIN,GACZJ,EAAUI,MAKhB,OADAQ,oBAAUX,EAAiB,IAEzB,kBAACP,EAAD,CAAMmB,UAAU,MAAMC,MAAO,CAAEC,gBAAiB,SAC9C,yBAAKF,UAAU,aACb,wBAAIA,UAAU,cACXd,EAAOiB,KAAOjB,EAAOiB,KAAKC,cAAgBlB,EAAOiB,MAEpD,4BACE,4BACE,gDACA,8BAAOjB,EAAOmB,aAEhB,4BACE,6CACA,8BAAOnB,EAAOoB,UAEhB,4BACE,6CACA,8BAAOpB,EAAOqB,WAGlB,4CACerB,EAAOsB,MAAQtB,EAAOsB,MAAMC,OAAS,KACjDvB,EAAOsB,MACmB,GAAvBtB,EAAOsB,MAAMC,OACX,SACA,UACF,OAGR,4BAAQC,QAAStB,EAAiBY,UAAU,gBAA5C,UC7GcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.578fcf2f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport './App.css';\n\n// credit: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Gerando_um_n%C3%BAmero_inteiro_aleat%C3%B3rio_entre_dois_valores_inclusive\nlet number = function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n/**\n * Styled Components\n * Palette #F7DE00#FCB426#E4E6E6#5A5A5A#393939\n *\n * @todo host to github pages\n */\nconst Main = styled.main`\n  flex-direction: column;\n  align-items: center;\n  justify-content: start;\n  display: flex;\n  margin: auto;\n  height: auto;\n  color: #393939;\n\n  .planetBox {\n    margin: 1em;\n    background-color: #e4e6e6;\n    border-radius: 15px;\n    padding: 20px;\n    font-size: 1.3em;\n    @media (min-width: 768px) {\n      font-size: 2em;\n    }\n  }\n\n  .planetName {\n    color: #fa9220;\n    margin: 0;\n    padding: 0;\n  }\n\n  .randomButton {\n    background-color: #fa9220;\n    padding: 10px;\n    border-radius: 15px;\n    color: #e4e6e6;\n    font-size: 1.7em;\n    font-weight: bold;\n  }\n  ol {\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: start;\n    list-style: none;\n    padding-left: 15px;\n    padding-right: 15px;\n\n    li {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    strong {\n      margin-right: 10px;\n    }\n  }\n`;\n\n// React Component\nfunction App() {\n  const [planet, setPlanet] = useState({});\n\n  const randomizePlanet = () => {\n    fetch(`https://swapi.co/api/planets/${number(1, 61)}/`)\n      .then(res => res.json())\n      .then(function(result) {\n        return JSON.stringify(result);\n      })\n      .then(function(res) {\n        console.log(res);\n        return JSON.parse(res);\n      })\n      .then(res => {\n        console.log(res);\n        setPlanet(res);\n      });\n  };\n\n  useEffect(randomizePlanet, []);\n  return (\n    <Main className=\"App\" style={{ backgroundColor: '#000' }}>\n      <div className=\"planetBox\">\n        <h1 className=\"planetName\">\n          {planet.name ? planet.name.toUpperCase() : planet.name}\n        </h1>\n        <ol>\n          <li>\n            <strong>POPULATION: </strong>\n            <span>{planet.population}</span>\n          </li>\n          <li>\n            <strong>CLIMATE: </strong>\n            <span>{planet.climate}</span>\n          </li>\n          <li>\n            <strong>TERRAIN: </strong>\n            <span>{planet.terrain}</span>\n          </li>\n        </ol>\n        <div>\n          Featured in {planet.films ? planet.films.length : null}\n          {planet.films\n            ? planet.films.length == 1\n              ? ' film.'\n              : ' films.'\n            : null}\n        </div>\n      </div>\n      <button onClick={randomizePlanet} className=\"randomButton\">\n        NEXT\n      </button>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}